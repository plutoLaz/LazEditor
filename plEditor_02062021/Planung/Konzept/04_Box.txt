Dokument Angelegt am Freitag dem 04.06.2021
===========================================

Variante 1

TPLEditorBox
+ Items:TObjectList;
+ property Item[const aItemIndex:Integer]:TPlDocBox;
+ property Count:Integer read GetCount;
+ property OwnerBox:TPLEditorBox read fOwnerBox write fOwnerBox;
Bei der RootBox ist die OnwerBox nicht gesetzt. Sonst bezieht jede MainBox von der OnwerBox die Breite.


  TPLEditorMainBox(TPLEditorBox)
  + LineList: TPLLineList;
  + ContentItemList:TPLEditor_ContentItemList;
  + procedure Layout(); virtual;

    TPLEditorTable(TPLEditorMainBox);
    + procedure Layout(); override;
    Eine Tabelle braucht die ContentItemList nicht > nil

    TPLEditorList(TPLEditorMainBox);
    + procedure Layout(); override;
    Eine Liste braucht die ContentItemList nicht > nil

Variante 2

TPLEditorBox
+ Items:TObjectList;
+ property Item[const aItemIndex:Integer]:TPlDocBox;
+ property Count:Integer read GetCount;
+ property StyleClass:TPLEditor_StyleClass read fStyleClass write fStyleClass;

  TPLEditorLineListBox(TPLEditorBox)
    + LineList: TPLLineList;
    + procedure Layout(); virtual;

    TPLEditorMainBox(TPLEditorLineListBox)
    + ContentItemList:TPLEditor_ContentItemList;
    + procedure Layout(); override;

    TPLEditorTable(TPLEditorLineListBox);
    + procedure Layout(); override;

    Hat erst gar keine ContentItemList, ein Problem?

    TPLEditorList(TPLEditorLineListBox);
    + procedure Layout(); override;
    Hat erst gar keine ContentItemList, ein Problem?

Da Tabellen im jedenfall von TPLEditorBox abgeleitet sind, gibt es eine ItemList.

Ich frage mich gerade, wozu könnte eine Tabelle eine LineList benötigen ? Jede MainBox hat eine eigene LineList.
Das würde bedeuten, dass die LineList im Prinzip Verschachtelt sein kann. Wie eben bei einer Tabelle.

Variante 3

TPLEditor_CustomBox
  + procedure Layout(); virtual;

  TPLEditor_ContainerBox(TPLEditorCustomBox)
  + Items:TObjectList;
  + procedure Layout(); override;
  + procedure AddBox(...);

  + property Item[const aItemIndex:Integer]:TPLEditor_CustomBox;
  + property Count:Integer read GetCount;
  + property OwnerBox:TPLEditor_CustomBox read fOwnerBox write fOwnerBox;

    TPLEditor_RootBox(TPLEditor_ContainerBox)
    + LineList: TPLEditor_LineList;
    + procedure Layout(); override;

    TPLEditor_Table(TPLEditor_ContainerBox);
    + procedure Layout(); override;

    TPLEditor_List(TPLEditor_ContainerBox);
    + procedure Layout(); override;

  TPLEditor_Paragraph(TPLEditor_CustomBox)
  + ContentItemList:TPLEditor_ContentList;
  + procedure Layout(); virtual;
  + procedure AddTextContent(const aValue:String; aStyle:TPLEditor_Style);
  + procedure AddImage(const aPic:TPicture; aStyle:TPLEditor_Style);
  + procedure AddImage(const aFileName:String; aStyle:TPLEditor_Style);

In dieser Variante, gibt es wieder ein Paragraph Container. Eigentlich gefällt mir auch der Name ContentBox ganz gut.
Die LineList wird in der RootBox verwaltet. Die ContentList wird nur von Paragraph verwaltet.

Die meisten Boxen sind von der ContainerBox abgeleitet.

Jede Box hat eine Layout Methode. Jede ContainerBox erzeugt eine neue Zeile in der LineList.
Die Mainbox bräuchte ich eigentlich nicht mehr. Die ContainerBox ist die neue MainBox. Bei dieser Variante.

Eine Frage wäre noch das Rendern. Für mich ist klar, die Boxen brauchen alle eine Layout methode.
Aber gilt das auch für das Rendern? Würde es ausreichen, wenn die RootBox eine Render Methode
hat?



Beispiel 1:
var
  RootBox:TPLEditor_RootBox;
  P1, P2, P3:TPLEditor_Paragraph;

  Table1:TPLEditor_Table;

  TableLine1, TableLine2:TPLEditor_ContainerBox;
  TableColumn1, TableColumn2, TableColumn3:TPLEditor_ContainerBox;
begin
  RootBox:=PLEditor.Document.RootBox;

  P1:=TPLEditor_Paragraph.Create(RootBox, Style1);

    P1.AddTextContent('Ich habe', Style1);
    P1.AddTextContent(' jetzt einige Erfahrung', Style2);
    P1.AddTextContent(' gemacht mit', Style3);

  P2:=TPLEditor_Paragraph.Create(RootBox, Style1);
    P2.AddTextContent('JavaScript Editoren,', Style4);
    P2.AddTextContent(' das', Style5);
    P2.AddTextContent(' schreiben damit', Style6);


  Table1:=TTPLEditorTable.Create(RootBox);

      TableLine1:=RootBox.AddBox(TPLEditor_ContainerBox.Create());
        TableColumn1:=TableLine1.AddBox(TPLEditor_ContainerBox.Create());
        TableColumn1.AddTextContent('Spalte 1');

        TableColumn2:=TableLine1.AddBox(TPLEditor_ContainerBox.Create());
        TableColumn2.AddTextContent('Spalte 2');

        TableColumn3:=TableLine1.AddBox(TPLEditor_ContainerBox.Create());
        TableColumn3.AddTextContent('Spalte 3');

      TableLine2:=RootBox.AddBox(TPLEditor_ContainerBox.Create());
        TableColumn1:=TableLine2.AddBox(TPLEditor_ContainerBox.Create());
        TableColumn1.AddTextContent('Spalte 1');

        TableColumn2:=TableLine2.AddBox(TPLEditor_ContainerBox.Create());
        TableColumn2.AddTextContent('Spalte 2');

        TableColumn3:=TableLine2.AddBox(TPLEditor_ContainerBox.Create());
        TableColumn3.AddTextContent('Spalte 3');

end;
